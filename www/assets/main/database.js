function db(){this.db_name="haccp",this.db_version="1.0",this.db_size=5242880,this.database=localStorage.getItem("database"),this.appVersion=localStorage.getItem("app-version"),this.data=[],this.query=!1,this.collections=[],this.tables=["settings","tasks","suppliers","employees","haccp_category","haccp_items","forms","registration","form_item","sync_query","reports","flowchart"]}function _fetchResults(a,b){db_data=b.rows}function createDesignDoc(a,b){var c={_id:"_design/"+a,views:{}};return c.views[a]={map:b.toString()},c}var query=!1,db_data=[];db.prototype.asyncExecute=function(a,b,c){void 0!=a.sql&&b<a.data.length&&(console.log("async triggered"),this.asyncExecute(a,parseInt(b)+1))},db.prototype.lazyQuery=function(a,b,c,d){if(1==logout_flag)return!1;a&&void 0!=b&&b.length>0?this.bulkDocs(a,b,c,d):"function"!=typeof c&&void 0!=window[c]?d?window[c](d):window[c]():c&&"function"==typeof c&&(d?c(d):c())},db.prototype.bulkDocs=function(a,b,c,d){if(!a)return null;for(var e=[],f=this,g=0;g<b.length;g++){b[g].timestamp=(new Date).toJSON();var h=g;!function(c,d){e[d]=new Promise(function(e,f){c.collections[a].get(String(b[d]._id),function(a,c){a&&e(!1),!a&&c&&c._rev?(b[d]._rev=c._rev,b[d]._id=c._id,e(!0)):e(!1)})})}(f,h)}Promise.all(e).then(function(){console.log("docs",b),f.collections[a].bulkDocs(b,function(b,e){console.log("aaaaaaaaa:",a,e,b),"function"!=typeof c&&void 0!=window[c]?d?window[c](d,e):window[c](e):c&&"function"==typeof c&&(d?c(d,e):c(e))})})},db.prototype.lazyQuerySync=function(a,b,c,d){if(1==logout_flag)return!1;void 0!=a&&void 0!=b&&b.length>0?(console.log("collection",a),this.bulkDocs(a,b,c,d)):void 0!=window[c]&&(void 0!=d?window[c](d):window[c]())},db.prototype.clean=function(){query=!1,db_data=[]},db.prototype._execQuery=function(a){return query?void a.executeSql(query,[],_fetchResults,this.dbErrorHandle):!1},db.prototype.createTables=function(){for(var a=0;a<this.tables.length;a++){this.collections[this.tables[a]]=new PouchDB(this.db_name+"_"+this.tables[a],{skip_setup:!0});var b=createDesignDoc("sort_index",function(a){emit(a.timestamp)});this.collections[this.tables[a]].put(b)}},db.prototype.dropDb=function(){this.db.transaction(this.dbDropTables,this.dbErrorHandle,function(){return!0})},db.prototype.dbDropTables=function(){this.database=!1;for(var a=0;a<localStorage.length;a++)console.log(localStorage.key(a)),"user_email"!=localStorage.key(a)&&localStorage.removeItem(localStorage.key(a));for(var b=[],a=0;a<this.tables.length;a++){var c=this.collections[this.tables[a]];b[a]=new Promise(function(a,b){c.destroy(a)})}return Promise.all(b)},db.prototype.InitDB=function(){this.createTables()},db.prototype.dbCreateTables=function(a){this.dbDropTables(a),localStorage.setItem("database",!0),this.database=!0,localStorage.setItem("app-version",settings.version),this.appVersion=settings.version,a.executeSql('CREATE TABLE IF NOT EXISTS "settings" ("type"  NOT NULL  UNIQUE , "value" )',[],function(a){}),a.executeSql('CREATE TABLE IF NOT EXISTS "tasks" ("id" INTEGER PRIMARY KEY NOT NULL ,"title" VARCHAR NOT NULL,"type" VARCHAR, "overdue" BOOL NOT NULL, "dueDate" TEXT, "completed" BOOL NOT NULL DEFAULT (1), "check" VARCHAR, "date_start" VARCHAR, "taskData" TEXT)'),a.executeSql('CREATE TABLE IF NOT EXISTS "suppliers" ("name" VARCHAR NOT NULL , "address" VARCHAR, "phone_number" VARCHAR, "id_number" VARCHAR)'),a.executeSql('CREATE TABLE IF NOT EXISTS "employees" ("first_name"  NOT NULL , "last_name"  NOT NULL , "email" , "role" )'),a.executeSql('CREATE TABLE IF NOT EXISTS "haccp_category" ("id" INTEGER PRIMARY KEY  NOT NULL  UNIQUE , "name" VARCHAR)'),a.executeSql('CREATE TABLE IF NOT EXISTS "haccp_items" ("id" INTEGER NOT NULL, "cat" INTEGER NOT NULL , "content" TEXT, "form" TEXT, "response" VARCHAR)'),a.executeSql('CREATE TABLE IF NOT EXISTS "forms" ("type" VARCHAR PRIMARY KEY NOT NULL , "label" TEXT, "alias" VARCHAR)'),a.executeSql('CREATE TABLE IF NOT EXISTS "form_item" ("id" INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL , "label" VARCHAR NOT NULL , "form" TEXT NOT NULL, "type" VARCHAR)'),a.executeSql('CREATE TABLE IF NOT EXISTS "registration" ("id" INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL , "step" INTEGER NOT NULL  UNIQUE , "data" TEXT NOT NULL )'),a.executeSql('CREATE TABLE IF NOT EXISTS "sync_query" ("id" INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL , "time" DATETIME NOT NULL  DEFAULT CURRENT_TIMESTAMP, "api" VARCHAR NOT NULL , "data" TEXT NOT NULL , "extra" INTEGER, "executed" INTEGER NOT NULL  DEFAULT 0,"q_type" VARCHAR)'),a.executeSql('CREATE TABLE IF NOT EXISTS "reports" ("id" INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL , "name" VARCHAR, "html" TEXT, "link" VARCHAR)'),a.executeSql('CREATE TABLE IF NOT EXISTS "flowchart" ("id" INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL , "name" TEXT, "path" TEXT)')},db.prototype.dbErrorHandle=function(a){console.log("Error processing SQL: ",a),console.log("query: ",query),db.dropDb()},db.prototype.dbSuccessHandle=function(){return!0},db.prototype.getDbInstance=function(a){return console.log("getDbInstance",a),a?this.collections[a]:!1},db.prototype.clearCollection=function(a){this.collections[a].allDocs({include_docs:!0,deleted:!0})};